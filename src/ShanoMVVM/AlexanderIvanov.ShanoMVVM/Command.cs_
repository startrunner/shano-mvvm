using System;
using System.Windows.Input;
using AlexanderIvanov.ShanoMVVM.Infrastructure;

namespace AlexanderIvanov.ShanoMVVM
{
    public class Command : ICommand
    {
        public static readonly Command Empty = new Command((Action)(() => { }), () => true);

        internal Command(Delegate execute, Func<bool> canExecute)
        {
            mExecute = Ensure.NotNull(execute, nameof(execute));
            mCanExecute = Ensure.NotNull(canExecute, nameof(canExecute));
        }

        internal Command(Action executeParameterless, Func<bool> canExecute) : this((Delegate)executeParameterless, canExecute) =>
            mExecuteParameterless = executeParameterless;

        public event EventHandler CanExecuteChanged;

        readonly Action mExecuteParameterless = null;
        readonly Delegate mExecute;
        readonly Func<bool> mCanExecute;

        public virtual bool CanExecute(object parameter) => mCanExecute.Invoke();
        public virtual void Execute(object parameter)
        {
            if (mExecuteParameterless != null)
            {
                mExecuteParameterless.Invoke();
                return;
            }

            var parameters = (object[])parameter;
            mExecute.DynamicInvoke(parameters);
            return;
        }
    }
}
